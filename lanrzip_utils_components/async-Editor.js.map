{"version":3,"file":"async-Editor.js","mappings":"6UAMA,IAAMA,EAAS,SAACC,GAIZ,I,IAAMC,GAASC,EAAAA,EAAAA,QAAO,MAC+BC,G,GAAfC,EAAAA,EAAAA,WAAS,G,EAAM,E,o4BAA9CC,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAE5BI,EAAY,WACdD,GAAe,EACnB,EA0DA,OAhDAE,EAAAA,EAAAA,YAAU,WAEN,GAAIP,EAAOQ,QAAS,CAEhB,IAAMC,EAAW,IAAIC,EAAAA,GAAS,CAC1BC,QAASX,EAAOQ,QAChBI,YAAa,YACbC,QAAS,gCACTC,kBAAkB,EAClBC,YAAa,CAAC,OAAQ,OAAQ,QAAS,SACvC,IAAK,UAAW,cAAe,YAC/B,IACA,CACIC,KAAM,cAENC,QAAS,SAACC,EAAOC,GAIbb,GACJ,EACAc,IAAK,eAET,UAAW,aAAc,MAEzBC,GAAI,CACAC,OAAQ,CACJC,MAAO,CACHC,MAAO,WACPC,OAAQ,mCACRC,UAAW,sCAIvBC,MAAO,CACHC,iBAAkB,SAACT,GACfb,GAGJ,KAGR,OAAO,WACHG,EAASoB,SACb,CACJ,CACJ,GAAG,IAGCC,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAAA,OAAKC,IAAK/B,EAAQgC,MAAO,CAACC,OAAQ,WAClCH,IAAAA,cAACI,EAAAA,EAAK,CACFC,MAAM,cACNC,KAAMhC,EACNiC,KA9DK,WACbhC,GAAe,EACnB,EA6DYiC,SA3DS,WACjBjC,GAAe,EACnB,GA2DYyB,IAAAA,cAAA,SAAG,oBACHA,IAAAA,cAAA,SAAG,oBACHA,IAAAA,cAAA,SAAG,qBAInB,EAEAhC,EAAOyC,UAAY,CAIfC,GAAIC,IAAAA,OAKJC,MAAOD,IAAAA,OAMPE,SAAUF,IAAAA,MAId,S","sources":["webpack:///./src/lib/fragments/Editor.react.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Modal } from 'antd';\r\nimport { AiEditor } from 'aieditor';\r\nimport \"aieditor/dist/style.css\";\r\n\r\nconst Editor = (props) => {\r\n    // let {id, label, value, tip} = props;\r\n\r\n    //定义 ref\r\n    const divRef = useRef(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n    \r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    //初始化 AiEditor\r\n    useEffect(() => {\r\n\r\n        if (divRef.current) {\r\n            \r\n            const aiEditor = new AiEditor({\r\n                element: divRef.current,\r\n                placeholder: \"点击输入内容...\",\r\n                content: 'AiEditor 是一个面向 AI 的开源富文本编辑器。 ',\r\n                contentRetention: true,\r\n                toolbarKeys: [\"undo\", \"redo\", \"brush\", \"eraser\",\r\n                \"|\", \"heading\", \"font-family\", \"font-size\",\r\n                \"|\",\r\n                {\r\n                    icon: \"<svg .....>\",\r\n                    // html:\"<div ...>\",\r\n                    onClick: (event, editor) => {\r\n                        //点击事件\r\n                        // console.log(editor.getHtml())  // AiEditor API\r\n                        // console.log(event.target.value)\r\n                        showModal();\r\n                    },\r\n                    tip: \"鼠标移动上去的提示内容\",\r\n                },\r\n                \"printer\", \"fullscreen\", \"ai\"\r\n            ],\r\n                ai: {\r\n                    models: {\r\n                        spark: {\r\n                            appId: \"97a1f660\",\r\n                            apiKey: \"7ce043a22243ee772e7191504f4ee917\",\r\n                            apiSecret: \"OTU1NWI5YjU3NWZhMTdlMDdkY2NlZTQz\"\r\n                        }\r\n                    },\r\n                },\r\n                image: {\r\n                    customMenuInvoke: (editor) => {\r\n                        showModal();  \r\n                        // Dash中的使用方式：设置一个`nClicksUploadImage`参数，setProps({nClicksUploadImage: nClicksUploadImage+1})\r\n                        // 再从Dash中的回调函数里捕获`nClicksUploadImage`参数，设置相应回调\r\n                    },\r\n                }\r\n            })\r\n            return ()=>{\r\n                aiEditor.destroy();\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div ref={divRef} style={{height: \"600px\"}} />\r\n            <Modal\r\n                title=\"Basic Modal\"\r\n                open={isModalOpen}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n            >\r\n                <p>Some contents...</p>\r\n                <p>Some contents...</p>\r\n                <p>Some contents...</p>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nEditor.propTypes = {\r\n    /**\r\n     * The ID used to identify this component in Dash callbacks.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * The value displayed in the input.\r\n     */\r\n    value: PropTypes.string,\r\n\r\n    /**\r\n     * Dash-assigned callback that should be called to report property changes\r\n     * to Dash, to make them available for callbacks.\r\n     */\r\n    setProps: PropTypes.func\r\n};\r\n\r\n\r\nexport default Editor;"],"names":["Editor","props","divRef","useRef","_useState2","useState","isModalOpen","setIsModalOpen","showModal","useEffect","current","aiEditor","AiEditor","element","placeholder","content","contentRetention","toolbarKeys","icon","onClick","event","editor","tip","ai","models","spark","appId","apiKey","apiSecret","image","customMenuInvoke","destroy","React","ref","style","height","Modal","title","open","onOk","onCancel","propTypes","id","PropTypes","value","setProps"],"sourceRoot":""}